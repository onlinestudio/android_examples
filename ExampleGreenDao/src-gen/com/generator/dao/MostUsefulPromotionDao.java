package com.generator.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.generator.dao.MostUsefulPromotion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MOST_USEFUL_PROMOTION.
*/
public class MostUsefulPromotionDao extends AbstractDao<MostUsefulPromotion, Long> {

    public static final String TABLENAME = "MOST_USEFUL_PROMOTION";

    /**
     * Properties of entity MostUsefulPromotion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdMostUsefulPromotionDatabase = new Property(1, Integer.class, "idMostUsefulPromotionDatabase", false, "ID_MOST_USEFUL_PROMOTION_DATABASE");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property TextPromotion = new Property(3, String.class, "textPromotion", false, "TEXT_PROMOTION");
    };


    public MostUsefulPromotionDao(DaoConfig config) {
        super(config);
    }
    
    public MostUsefulPromotionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MOST_USEFUL_PROMOTION' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID_MOST_USEFUL_PROMOTION_DATABASE' INTEGER," + // 1: idMostUsefulPromotionDatabase
                "'IMAGE_URL' TEXT," + // 2: imageUrl
                "'TEXT_PROMOTION' TEXT);"); // 3: textPromotion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MOST_USEFUL_PROMOTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MostUsefulPromotion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idMostUsefulPromotionDatabase = entity.getIdMostUsefulPromotionDatabase();
        if (idMostUsefulPromotionDatabase != null) {
            stmt.bindLong(2, idMostUsefulPromotionDatabase);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        String textPromotion = entity.getTextPromotion();
        if (textPromotion != null) {
            stmt.bindString(4, textPromotion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MostUsefulPromotion readEntity(Cursor cursor, int offset) {
        MostUsefulPromotion entity = new MostUsefulPromotion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idMostUsefulPromotionDatabase
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // textPromotion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MostUsefulPromotion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdMostUsefulPromotionDatabase(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTextPromotion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MostUsefulPromotion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MostUsefulPromotion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
