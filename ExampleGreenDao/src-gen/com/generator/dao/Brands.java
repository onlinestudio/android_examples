package com.generator.dao;

import com.generator.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table BRANDS.
 */
public class Brands {

    private Long id;
    private Integer idBrandDatabase;
    private String name;
    private String imageUrl;
    private String lastUpdate;
    private Integer flagAct;
    private String color;
    private String logoUrl;
    private String pathBanner;
    private String pathLogos;
    private Long idCompany;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BrandsDao myDao;

    private Promotions promotions;
    private Long promotions__resolvedKey;

    private Locations locations;
    private Long locations__resolvedKey;

    private UserByBrands userByBrands;
    private Long userByBrands__resolvedKey;


    public Brands() {
    }

    public Brands(Long id) {
        this.id = id;
    }

    public Brands(Long id, Integer idBrandDatabase, String name, String imageUrl, String lastUpdate, Integer flagAct, String color, String logoUrl, String pathBanner, String pathLogos, Long idCompany) {
        this.id = id;
        this.idBrandDatabase = idBrandDatabase;
        this.name = name;
        this.imageUrl = imageUrl;
        this.lastUpdate = lastUpdate;
        this.flagAct = flagAct;
        this.color = color;
        this.logoUrl = logoUrl;
        this.pathBanner = pathBanner;
        this.pathLogos = pathLogos;
        this.idCompany = idCompany;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBrandsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getIdBrandDatabase() {
        return idBrandDatabase;
    }

    public void setIdBrandDatabase(Integer idBrandDatabase) {
        this.idBrandDatabase = idBrandDatabase;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    public String getLastUpdate() {
        return lastUpdate;
    }

    public void setLastUpdate(String lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    public Integer getFlagAct() {
        return flagAct;
    }

    public void setFlagAct(Integer flagAct) {
        this.flagAct = flagAct;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public String getLogoUrl() {
        return logoUrl;
    }

    public void setLogoUrl(String logoUrl) {
        this.logoUrl = logoUrl;
    }

    public String getPathBanner() {
        return pathBanner;
    }

    public void setPathBanner(String pathBanner) {
        this.pathBanner = pathBanner;
    }

    public String getPathLogos() {
        return pathLogos;
    }

    public void setPathLogos(String pathLogos) {
        this.pathLogos = pathLogos;
    }

    public Long getIdCompany() {
        return idCompany;
    }

    public void setIdCompany(Long idCompany) {
        this.idCompany = idCompany;
    }

    /** To-one relationship, resolved on first access. */
    public Promotions getPromotions() {
        Long __key = this.idBrand;
        if (promotions__resolvedKey == null || !promotions__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PromotionsDao targetDao = daoSession.getPromotionsDao();
            Promotions promotionsNew = targetDao.load(__key);
            synchronized (this) {
                promotions = promotionsNew;
            	promotions__resolvedKey = __key;
            }
        }
        return promotions;
    }

    public void setPromotions(Promotions promotions) {
        synchronized (this) {
            this.promotions = promotions;
            idBrand = promotions == null ? null : promotions.getId();
            promotions__resolvedKey = idBrand;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Locations getLocations() {
        Long __key = this.idBrand;
        if (locations__resolvedKey == null || !locations__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationsDao targetDao = daoSession.getLocationsDao();
            Locations locationsNew = targetDao.load(__key);
            synchronized (this) {
                locations = locationsNew;
            	locations__resolvedKey = __key;
            }
        }
        return locations;
    }

    public void setLocations(Locations locations) {
        synchronized (this) {
            this.locations = locations;
            idBrand = locations == null ? null : locations.getId();
            locations__resolvedKey = idBrand;
        }
    }

    /** To-one relationship, resolved on first access. */
    public UserByBrands getUserByBrands() {
        Long __key = this.idBrand;
        if (userByBrands__resolvedKey == null || !userByBrands__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserByBrandsDao targetDao = daoSession.getUserByBrandsDao();
            UserByBrands userByBrandsNew = targetDao.load(__key);
            synchronized (this) {
                userByBrands = userByBrandsNew;
            	userByBrands__resolvedKey = __key;
            }
        }
        return userByBrands;
    }

    public void setUserByBrands(UserByBrands userByBrands) {
        synchronized (this) {
            this.userByBrands = userByBrands;
            idBrand = userByBrands == null ? null : userByBrands.getId();
            userByBrands__resolvedKey = idBrand;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
