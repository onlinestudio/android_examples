package com.generator.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.generator.dao.UserByPromotions;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_BY_PROMOTIONS.
*/
public class UserByPromotionsDao extends AbstractDao<UserByPromotions, Long> {

    public static final String TABLENAME = "USER_BY_PROMOTIONS";

    /**
     * Properties of entity UserByPromotions.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdUserByPromotionDatabase = new Property(1, Integer.class, "idUserByPromotionDatabase", false, "ID_USER_BY_PROMOTION_DATABASE");
        public final static Property GeneratedCode = new Property(2, String.class, "generatedCode", false, "GENERATED_CODE");
        public final static Property CreationTimestamp = new Property(3, String.class, "creationTimestamp", false, "CREATION_TIMESTAMP");
        public final static Property ValidMinutes = new Property(4, Integer.class, "validMinutes", false, "VALID_MINUTES");
        public final static Property FlagAct = new Property(5, Integer.class, "flagAct", false, "FLAG_ACT");
        public final static Property LastUpdate = new Property(6, String.class, "lastUpdate", false, "LAST_UPDATE");
        public final static Property IdPromotion = new Property(7, Long.class, "idPromotion", false, "ID_PROMOTION");
        public final static Property IdUser = new Property(8, Long.class, "idUser", false, "ID_USER");
    };


    public UserByPromotionsDao(DaoConfig config) {
        super(config);
    }
    
    public UserByPromotionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_BY_PROMOTIONS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID_USER_BY_PROMOTION_DATABASE' INTEGER," + // 1: idUserByPromotionDatabase
                "'GENERATED_CODE' TEXT," + // 2: generatedCode
                "'CREATION_TIMESTAMP' TEXT," + // 3: creationTimestamp
                "'VALID_MINUTES' INTEGER," + // 4: validMinutes
                "'FLAG_ACT' INTEGER," + // 5: flagAct
                "'LAST_UPDATE' TEXT," + // 6: lastUpdate
                "'ID_PROMOTION' INTEGER," + // 7: idPromotion
                "'ID_USER' INTEGER);"); // 8: idUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_BY_PROMOTIONS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserByPromotions entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idUserByPromotionDatabase = entity.getIdUserByPromotionDatabase();
        if (idUserByPromotionDatabase != null) {
            stmt.bindLong(2, idUserByPromotionDatabase);
        }
 
        String generatedCode = entity.getGeneratedCode();
        if (generatedCode != null) {
            stmt.bindString(3, generatedCode);
        }
 
        String creationTimestamp = entity.getCreationTimestamp();
        if (creationTimestamp != null) {
            stmt.bindString(4, creationTimestamp);
        }
 
        Integer validMinutes = entity.getValidMinutes();
        if (validMinutes != null) {
            stmt.bindLong(5, validMinutes);
        }
 
        Integer flagAct = entity.getFlagAct();
        if (flagAct != null) {
            stmt.bindLong(6, flagAct);
        }
 
        String lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindString(7, lastUpdate);
        }
 
        Long idPromotion = entity.getIdPromotion();
        if (idPromotion != null) {
            stmt.bindLong(8, idPromotion);
        }
 
        Long idUser = entity.getIdUser();
        if (idUser != null) {
            stmt.bindLong(9, idUser);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserByPromotions readEntity(Cursor cursor, int offset) {
        UserByPromotions entity = new UserByPromotions( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idUserByPromotionDatabase
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // generatedCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // creationTimestamp
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // validMinutes
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // flagAct
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastUpdate
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // idPromotion
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // idUser
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserByPromotions entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdUserByPromotionDatabase(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGeneratedCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreationTimestamp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValidMinutes(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFlagAct(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLastUpdate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdPromotion(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setIdUser(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserByPromotions entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserByPromotions entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
