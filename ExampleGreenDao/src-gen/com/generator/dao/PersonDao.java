package com.generator.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.generator.dao.Person;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PERSON.
*/
public class PersonDao extends AbstractDao<Person, Long> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdPersonDatabase = new Property(1, Integer.class, "idPersonDatabase", false, "ID_PERSON_DATABASE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Surname = new Property(3, String.class, "surname", false, "SURNAME");
        public final static Property FacebookId = new Property(4, String.class, "facebookId", false, "FACEBOOK_ID");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Cellphone = new Property(6, String.class, "cellphone", false, "CELLPHONE");
        public final static Property ImageUrl = new Property(7, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property FlagAct = new Property(8, Integer.class, "flagAct", false, "FLAG_ACT");
        public final static Property LastUpdate = new Property(9, String.class, "lastUpdate", false, "LAST_UPDATE");
        public final static Property CreationTimestamp = new Property(10, String.class, "creationTimestamp", false, "CREATION_TIMESTAMP");
        public final static Property IdPerson = new Property(11, Long.class, "idPerson", false, "ID_PERSON");
    };

    private DaoSession daoSession;


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PERSON' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID_PERSON_DATABASE' INTEGER," + // 1: idPersonDatabase
                "'NAME' TEXT," + // 2: name
                "'SURNAME' TEXT," + // 3: surname
                "'FACEBOOK_ID' TEXT," + // 4: facebookId
                "'EMAIL' TEXT," + // 5: email
                "'CELLPHONE' TEXT," + // 6: cellphone
                "'IMAGE_URL' TEXT," + // 7: imageUrl
                "'FLAG_ACT' INTEGER," + // 8: flagAct
                "'LAST_UPDATE' TEXT," + // 9: lastUpdate
                "'CREATION_TIMESTAMP' TEXT," + // 10: creationTimestamp
                "'ID_PERSON' INTEGER);"); // 11: idPerson
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PERSON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idPersonDatabase = entity.getIdPersonDatabase();
        if (idPersonDatabase != null) {
            stmt.bindLong(2, idPersonDatabase);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String surname = entity.getSurname();
        if (surname != null) {
            stmt.bindString(4, surname);
        }
 
        String facebookId = entity.getFacebookId();
        if (facebookId != null) {
            stmt.bindString(5, facebookId);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String cellphone = entity.getCellphone();
        if (cellphone != null) {
            stmt.bindString(7, cellphone);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(8, imageUrl);
        }
 
        Integer flagAct = entity.getFlagAct();
        if (flagAct != null) {
            stmt.bindLong(9, flagAct);
        }
 
        String lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindString(10, lastUpdate);
        }
 
        String creationTimestamp = entity.getCreationTimestamp();
        if (creationTimestamp != null) {
            stmt.bindString(11, creationTimestamp);
        }
    }

    @Override
    protected void attachEntity(Person entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idPersonDatabase
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // surname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // facebookId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cellphone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imageUrl
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // flagAct
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lastUpdate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // creationTimestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdPersonDatabase(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSurname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFacebookId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCellphone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImageUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFlagAct(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLastUpdate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreationTimestamp(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Person entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Person entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUsersDao().getAllColumns());
            builder.append(" FROM PERSON T");
            builder.append(" LEFT JOIN USERS T0 ON T.'ID_PERSON'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Person loadCurrentDeep(Cursor cursor, boolean lock) {
        Person entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Users users = loadCurrentOther(daoSession.getUsersDao(), cursor, offset);
        entity.setUsers(users);

        return entity;    
    }

    public Person loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Person> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Person> list = new ArrayList<Person>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Person> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Person> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
