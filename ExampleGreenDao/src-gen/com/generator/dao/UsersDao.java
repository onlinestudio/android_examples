package com.generator.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.generator.dao.Users;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USERS.
*/
public class UsersDao extends AbstractDao<Users, Long> {

    public static final String TABLENAME = "USERS";

    /**
     * Properties of entity Users.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdUserDatabase = new Property(1, Integer.class, "idUserDatabase", false, "ID_USER_DATABASE");
        public final static Property DNI = new Property(2, String.class, "DNI", false, "DNI");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property VerifiedDNI = new Property(4, Integer.class, "verifiedDNI", false, "VERIFIED_DNI");
        public final static Property FlagAct = new Property(5, Integer.class, "flagAct", false, "FLAG_ACT");
        public final static Property LastUpdate = new Property(6, String.class, "lastUpdate", false, "LAST_UPDATE");
        public final static Property CreationTimestamp = new Property(7, String.class, "creationTimestamp", false, "CREATION_TIMESTAMP");
        public final static Property IdPerson = new Property(8, Long.class, "idPerson", false, "ID_PERSON");
        public final static Property IdUser = new Property(9, Long.class, "idUser", false, "ID_USER");
        public final static Property IdUser = new Property(10, Long.class, "idUser", false, "ID_USER");
    };

    private DaoSession daoSession;


    public UsersDao(DaoConfig config) {
        super(config);
    }
    
    public UsersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USERS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID_USER_DATABASE' INTEGER," + // 1: idUserDatabase
                "'DNI' TEXT," + // 2: DNI
                "'PASSWORD' TEXT," + // 3: password
                "'VERIFIED_DNI' INTEGER," + // 4: verifiedDNI
                "'FLAG_ACT' INTEGER," + // 5: flagAct
                "'LAST_UPDATE' TEXT," + // 6: lastUpdate
                "'CREATION_TIMESTAMP' TEXT," + // 7: creationTimestamp
                "'ID_PERSON' INTEGER," + // 8: idPerson
                "'ID_USER' INTEGER," + // 9: idUser
                "'ID_USER' INTEGER);"); // 10: idUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USERS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Users entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idUserDatabase = entity.getIdUserDatabase();
        if (idUserDatabase != null) {
            stmt.bindLong(2, idUserDatabase);
        }
 
        String DNI = entity.getDNI();
        if (DNI != null) {
            stmt.bindString(3, DNI);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        Integer verifiedDNI = entity.getVerifiedDNI();
        if (verifiedDNI != null) {
            stmt.bindLong(5, verifiedDNI);
        }
 
        Integer flagAct = entity.getFlagAct();
        if (flagAct != null) {
            stmt.bindLong(6, flagAct);
        }
 
        String lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindString(7, lastUpdate);
        }
 
        String creationTimestamp = entity.getCreationTimestamp();
        if (creationTimestamp != null) {
            stmt.bindString(8, creationTimestamp);
        }
 
        Long idPerson = entity.getIdPerson();
        if (idPerson != null) {
            stmt.bindLong(9, idPerson);
        }
    }

    @Override
    protected void attachEntity(Users entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Users readEntity(Cursor cursor, int offset) {
        Users entity = new Users( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idUserDatabase
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DNI
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // verifiedDNI
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // flagAct
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastUpdate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // creationTimestamp
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // idPerson
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Users entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdUserDatabase(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDNI(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVerifiedDNI(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFlagAct(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLastUpdate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreationTimestamp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIdPerson(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Users entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Users entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserByBrandsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserByPromotionsDao().getAllColumns());
            builder.append(" FROM USERS T");
            builder.append(" LEFT JOIN USER_BY_BRANDS T0 ON T.'ID_USER'=T0.'_id'");
            builder.append(" LEFT JOIN USER_BY_PROMOTIONS T1 ON T.'ID_USER'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Users loadCurrentDeep(Cursor cursor, boolean lock) {
        Users entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserByBrands userByBrands = loadCurrentOther(daoSession.getUserByBrandsDao(), cursor, offset);
        entity.setUserByBrands(userByBrands);
        offset += daoSession.getUserByBrandsDao().getAllColumns().length;

        UserByPromotions userByPromotions = loadCurrentOther(daoSession.getUserByPromotionsDao(), cursor, offset);
        entity.setUserByPromotions(userByPromotions);

        return entity;    
    }

    public Users loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Users> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Users> list = new ArrayList<Users>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Users> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Users> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
