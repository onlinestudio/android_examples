package com.generator.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.generator.dao.Promotions;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROMOTIONS.
*/
public class PromotionsDao extends AbstractDao<Promotions, Long> {

    public static final String TABLENAME = "PROMOTIONS";

    /**
     * Properties of entity Promotions.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdPromotionDatabase = new Property(1, Integer.class, "idPromotionDatabase", false, "ID_PROMOTION_DATABASE");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property TermAndConditions = new Property(3, String.class, "termAndConditions", false, "TERM_AND_CONDITIONS");
        public final static Property CouponDescription = new Property(4, String.class, "couponDescription", false, "COUPON_DESCRIPTION");
        public final static Property FlagAct = new Property(5, Integer.class, "flagAct", false, "FLAG_ACT");
        public final static Property LastUpdate = new Property(6, String.class, "lastUpdate", false, "LAST_UPDATE");
        public final static Property CouponDescriptionLong = new Property(7, String.class, "couponDescriptionLong", false, "COUPON_DESCRIPTION_LONG");
        public final static Property Exchangeable = new Property(8, Boolean.class, "exchangeable", false, "EXCHANGEABLE");
        public final static Property PathImage = new Property(9, String.class, "pathImage", false, "PATH_IMAGE");
        public final static Property PathImageBig = new Property(10, String.class, "pathImageBig", false, "PATH_IMAGE_BIG");
        public final static Property IdBrand = new Property(11, Long.class, "idBrand", false, "ID_BRAND");
        public final static Property IdPromotion = new Property(12, Long.class, "idPromotion", false, "ID_PROMOTION");
    };

    private DaoSession daoSession;


    public PromotionsDao(DaoConfig config) {
        super(config);
    }
    
    public PromotionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROMOTIONS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID_PROMOTION_DATABASE' INTEGER," + // 1: idPromotionDatabase
                "'IMAGE_URL' TEXT," + // 2: imageUrl
                "'TERM_AND_CONDITIONS' TEXT," + // 3: termAndConditions
                "'COUPON_DESCRIPTION' TEXT," + // 4: couponDescription
                "'FLAG_ACT' INTEGER," + // 5: flagAct
                "'LAST_UPDATE' TEXT," + // 6: lastUpdate
                "'COUPON_DESCRIPTION_LONG' TEXT," + // 7: couponDescriptionLong
                "'EXCHANGEABLE' INTEGER," + // 8: exchangeable
                "'PATH_IMAGE' TEXT," + // 9: pathImage
                "'PATH_IMAGE_BIG' TEXT," + // 10: pathImageBig
                "'ID_BRAND' INTEGER," + // 11: idBrand
                "'ID_PROMOTION' INTEGER);"); // 12: idPromotion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROMOTIONS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Promotions entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idPromotionDatabase = entity.getIdPromotionDatabase();
        if (idPromotionDatabase != null) {
            stmt.bindLong(2, idPromotionDatabase);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        String termAndConditions = entity.getTermAndConditions();
        if (termAndConditions != null) {
            stmt.bindString(4, termAndConditions);
        }
 
        String couponDescription = entity.getCouponDescription();
        if (couponDescription != null) {
            stmt.bindString(5, couponDescription);
        }
 
        Integer flagAct = entity.getFlagAct();
        if (flagAct != null) {
            stmt.bindLong(6, flagAct);
        }
 
        String lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindString(7, lastUpdate);
        }
 
        String couponDescriptionLong = entity.getCouponDescriptionLong();
        if (couponDescriptionLong != null) {
            stmt.bindString(8, couponDescriptionLong);
        }
 
        Boolean exchangeable = entity.getExchangeable();
        if (exchangeable != null) {
            stmt.bindLong(9, exchangeable ? 1l: 0l);
        }
 
        String pathImage = entity.getPathImage();
        if (pathImage != null) {
            stmt.bindString(10, pathImage);
        }
 
        String pathImageBig = entity.getPathImageBig();
        if (pathImageBig != null) {
            stmt.bindString(11, pathImageBig);
        }
 
        Long idBrand = entity.getIdBrand();
        if (idBrand != null) {
            stmt.bindLong(12, idBrand);
        }
    }

    @Override
    protected void attachEntity(Promotions entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Promotions readEntity(Cursor cursor, int offset) {
        Promotions entity = new Promotions( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idPromotionDatabase
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // termAndConditions
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // couponDescription
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // flagAct
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastUpdate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // couponDescriptionLong
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // exchangeable
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pathImage
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pathImageBig
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // idBrand
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Promotions entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdPromotionDatabase(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTermAndConditions(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCouponDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFlagAct(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLastUpdate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCouponDescriptionLong(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExchangeable(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setPathImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPathImageBig(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIdBrand(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Promotions entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Promotions entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserByPromotionsDao().getAllColumns());
            builder.append(" FROM PROMOTIONS T");
            builder.append(" LEFT JOIN USER_BY_PROMOTIONS T0 ON T.'ID_PROMOTION'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Promotions loadCurrentDeep(Cursor cursor, boolean lock) {
        Promotions entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserByPromotions userByPromotions = loadCurrentOther(daoSession.getUserByPromotionsDao(), cursor, offset);
        entity.setUserByPromotions(userByPromotions);

        return entity;    
    }

    public Promotions loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Promotions> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Promotions> list = new ArrayList<Promotions>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Promotions> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Promotions> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
