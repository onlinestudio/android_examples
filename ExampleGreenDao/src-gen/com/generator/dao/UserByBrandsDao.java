package com.generator.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.generator.dao.UserByBrands;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_BY_BRANDS.
*/
public class UserByBrandsDao extends AbstractDao<UserByBrands, Long> {

    public static final String TABLENAME = "USER_BY_BRANDS";

    /**
     * Properties of entity UserByBrands.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FlagAct = new Property(1, Integer.class, "flagAct", false, "FLAG_ACT");
        public final static Property LastUpdate = new Property(2, String.class, "lastUpdate", false, "LAST_UPDATE");
        public final static Property IdBrand = new Property(3, Long.class, "idBrand", false, "ID_BRAND");
        public final static Property IdUser = new Property(4, Long.class, "idUser", false, "ID_USER");
    };


    public UserByBrandsDao(DaoConfig config) {
        super(config);
    }
    
    public UserByBrandsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_BY_BRANDS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'FLAG_ACT' INTEGER," + // 1: flagAct
                "'LAST_UPDATE' TEXT," + // 2: lastUpdate
                "'ID_BRAND' INTEGER," + // 3: idBrand
                "'ID_USER' INTEGER);"); // 4: idUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_BY_BRANDS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserByBrands entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer flagAct = entity.getFlagAct();
        if (flagAct != null) {
            stmt.bindLong(2, flagAct);
        }
 
        String lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindString(3, lastUpdate);
        }
 
        Long idBrand = entity.getIdBrand();
        if (idBrand != null) {
            stmt.bindLong(4, idBrand);
        }
 
        Long idUser = entity.getIdUser();
        if (idUser != null) {
            stmt.bindLong(5, idUser);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserByBrands readEntity(Cursor cursor, int offset) {
        UserByBrands entity = new UserByBrands( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // flagAct
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastUpdate
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // idBrand
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // idUser
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserByBrands entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFlagAct(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLastUpdate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdBrand(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setIdUser(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserByBrands entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserByBrands entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
